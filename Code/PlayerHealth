using UnityEngine;
using System.Collections;

public class PlayerHealth : MonoBehaviour
{
    public float invincibleTime = 3f;  // 무적 시간
    public float pushBackForce = 5f;   // 뒤로 밀리는 힘
    public int maxHealth = 10;         // 최대 체력
    public int currentHealth;          // 현재 체력

    private int collisionCount = 0;    // 충돌 횟수
    private bool isInvincible = false; // 무적 상태 체크
    private Renderer playerRenderer;   // 플레이어의 Renderer
    private Collider playerCollider;   // 플레이어의 Collider
    private Color originalColor;       // 원래의 플레이어 색상

    void Start()
    {
        playerRenderer = GetComponent<Renderer>();
        playerCollider = GetComponent<Collider>();
        currentHealth = maxHealth;     // 시작 시 최대 체력으로 초기화

        if (playerRenderer != null)
        {
            originalColor = playerRenderer.material.color; // 원래 색상 저장
        }
    }

    // 충돌 시 호출되는 함수
    void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Monster"))
        {
            // 충돌 시 투명화와 밀림 효과 적용
            PushBackAndBecomeTransparent(collision);

            // 충돌 횟수 증가
            collisionCount++;

            if (collisionCount >= 10)
            {
                Debug.Log("충돌 횟수 초과! 플레이어 삭제");
                Destroy(gameObject); // 10회 충돌 시 플레이어 삭제
                return;
            }

            // 무적 상태가 아니면 무적 상태로 전환
            if (!isInvincible)
            {
                StartCoroutine(BecomeInvincible());
            }

            // 몬스터와의 충돌에서 데미지를 받는 처리
            TakeDamage(1); // 데미지 양은 예시로 1
        }
    }

    // 데미지를 받는 함수
    public void TakeDamage(int damageAmount)
    {
        if (isInvincible) return;

        currentHealth -= damageAmount;
        Debug.Log($"플레이어가 {damageAmount}만큼의 데미지를 입어 현재 체력: {currentHealth}");

        if (currentHealth <= 0)
        {
            Die();
        }
    }

    // 플레이어 사망 처리
    void Die()
    {
        Debug.Log("플레이어 사망!");
        Destroy(gameObject);
    }

    // 충돌 후 플레이어가 밀리고 투명해지는 처리
    void PushBackAndBecomeTransparent(Collision collision)
    {
        // 뒤로 밀리는 방향 계산
        Vector3 pushDirection = transform.position - collision.transform.position;
        pushDirection.y = 0; // 수평으로만 밀기
        Rigidbody rb = GetComponent<Rigidbody>();
        if (rb != null)
        {
            // 밀리는 힘을 적용
            rb.AddForce(pushDirection.normalized * pushBackForce, ForceMode.Impulse);
        }

        // 투명도 변경
        if (playerRenderer != null)
        {
            Color color = playerRenderer.material.color;
            color.a = 0.5f; // 50% 투명도
            playerRenderer.material.color = color;
        }
    }

    // 무적 상태 코루틴
    IEnumerator BecomeInvincible()
    {
        isInvincible = true;
        playerCollider.enabled = false;

        yield return new WaitForSeconds(invincibleTime); // 무적 시간 대기

        // 원래의 불투명 상태로 복원
        if (playerRenderer != null)
        {
            playerRenderer.material.color = originalColor;
        }

        playerCollider.enabled = true;
        isInvincible = false;
    }

    // 체력 회복 함수
    public void Heal(int healAmount)
    {
        currentHealth = Mathf.Min(currentHealth + healAmount, maxHealth);
        Debug.Log($"플레이어가 {healAmount}만큼 회복하여 현재 체력: {currentHealth}");
    }
}
